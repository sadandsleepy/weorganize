import 'dart:typed_data';import 'package:path_provider/path_provider.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:intl/intl.dart';import 'package:permission_handler/permission_handler.dart';import 'dart:io';import 'package:qr_flutter/qr_flutter.dart';import 'package:screenshot/screenshot.dart';import 'package:share_plus/share_plus.dart';import 'package:weorganize/model/attendance.dart';import 'package:weorganize/model/events.dart';import 'package:weorganize/utils/helper.dart';import 'package:weorganize/view/editevent.dart';import '../service/services.dart';import 'fragment/scan.dart';class EventDetails extends StatefulWidget {  const EventDetails({Key? key, required this.id}) : super(key: key);  final int id;  @override  State<EventDetails> createState() => _EventDetailsState();}class _EventDetailsState extends State<EventDetails> {  ScreenshotController screenshotController = ScreenshotController();  late EventApiService eventApiService;  late AttendanceApiService attendanceApiService;  late EventsModel events;  late AttendancesModel attendances;  bool attendance = false;  bool editMode = false;  bool refresh = false;  Uint8List imageFile = Uint8List(0);  FirebaseAuth auth = FirebaseAuth.instance;  @override  void initState() {    // TODO: implement initState    eventApiService = EventApiService();    attendanceApiService = AttendanceApiService();    super.initState();  }  @override  Widget build(BuildContext context) {    User? user = auth.currentUser;    var iduser = user?.uid;    return Scaffold(      appBar: AppBar(        title: const Text(          "Details",          style: TextStyle(              color: Colors.green          ),        ),        centerTitle: true,        leading: IconButton(          icon: const Icon(              Icons.arrow_back_ios_new_outlined,              color: Colors.green          ),          onPressed: () => {            Navigator.pop(context),          },        ),        actions: [            IconButton(              splashColor: Colors.transparent,              highlightColor: Colors.transparent,              icon: const Icon(                  Icons.sync,                  color: Colors.green              ),              onPressed: () {                pullRefresh();              },            )        ],      ),      backgroundColor: Colors.white,      body: SafeArea(        child: FutureBuilder<EventsModel?>(          future: eventApiService.getEventBy(widget.id),          builder: (context, snapshot){            if (snapshot.connectionState == ConnectionState.none) {              return const LinearProgressIndicator();            }            else if(snapshot.connectionState == ConnectionState.done){              events = snapshot.data!;              return Container(                alignment: Alignment.center,                margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),                child: Column(                  children: [                    Expanded(                      flex: 2,                      child: Image.network(                        events.picture,                        fit: BoxFit.fill,                      ),                    ),                    Expanded(                        flex: 1,                        child: Container(                          alignment: Alignment.center,                          child: Text(                            events.event_name,                            style: const TextStyle(                              color: Colors.green,                              fontWeight: FontWeight.bold                            ),                          ),                        )                    ),                    Expanded(                      flex: 6,                        child: SingleChildScrollView(                          child: Text(                            events.description,),                        )                    ),                    Expanded(                        flex: 1,                        child: FutureBuilder(                          future: attendanceApiService.getAttStat(iduser!, events.id_event),                          builder: (BuildContext context, snapshot) {                            if (snapshot.connectionState == ConnectionState.none) {                              return const LinearProgressIndicator();                            }else if(snapshot.connectionState == ConnectionState.done && snapshot.data != null){                              attendances = snapshot.data as AttendancesModel;                              checkAttendance();                              return Container(                                alignment: Alignment.centerLeft,                                child: confPart(events.id_user, iduser),                              );                            }                            return Center(                              child: Container(                                alignment: Alignment.centerLeft,                                child: confPart(events.id_user, iduser),                              )                            );                          },                        ),                    )                  ],                ),              );            }            return Center(              child: Container(),            );          },        )      ),    );  }  confPart(String iduser, String uid) {    refresh = true;    if(iduser == uid){      return Row(        children: [          Expanded(            flex: 3,              child: GestureDetector(                  onTap: (){                    toast("generating");                    generateQR();                  },                  child: Container(                      height: 50,                      decoration: const BoxDecoration(                          color: Colors.green,                          borderRadius: BorderRadius.all(                              Radius.circular(10)                          )                      ),                      child: Row(                        mainAxisAlignment: MainAxisAlignment.center,                        children: const [                          Text(                            'Generate QR Code',                            style: TextStyle(                                color: Colors.white,                                fontWeight: FontWeight.bold,                                fontSize: 25                            ),                          ),                          SizedBox(                            width: 10,                          ),                          Icon(Icons.qr_code_2_rounded, color: Colors.black,)                        ],                      )                  )              )          ),          const SizedBox(width: 10,),          Expanded(            flex: 1,              child: GestureDetector(                  onTap: (){                    goEditPage();                  },                  child: Container(                      height: 50,                      decoration: const BoxDecoration(                          color: Colors.green,                          borderRadius: BorderRadius.all(                              Radius.circular(10)                          )                      ),                      child: Row(                        mainAxisAlignment: MainAxisAlignment.center,                        children: const [                          Text(                            'Edit',                            style: TextStyle(                                color: Colors.white,                                fontWeight: FontWeight.bold,                                fontSize: 25                            ),                          ),                          SizedBox(                            width: 10,                          ),                          Icon(Icons.edit_outlined, color: Colors.black,)                        ],                      )                  )              )          )        ],      );    }    else if(attendance==false){      return GestureDetector(          onTap: (){            onLoad();          },          child: Container(              height: 50,              decoration: const BoxDecoration(                  color: Colors.green,                  borderRadius: BorderRadius.all(                      Radius.circular(10)                  )              ),              child: const Center(                  child: Text(                    'Ikuti Acara',                    style: TextStyle(                        color: Colors.white,                        fontWeight: FontWeight.bold,                        fontSize: 25                    ),                  )              )          )      );    }    else{      return GestureDetector(        onTap: (){          toast('Ketuk Layar Untuk Scan!');          Navigator.of(context).push(              MaterialPageRoute(                  builder: (context) => const QRScan())          );        },        child: Container(            height: 50,            decoration: const BoxDecoration(                color: Colors.grey,                borderRadius: BorderRadius.all(                    Radius.circular(10)                )            ),            child: Row(              mainAxisAlignment: MainAxisAlignment.center,              children: const [                Text(                  'Scan Kehadiran',                  style: TextStyle(                      color: Colors.black12,                      fontWeight: FontWeight.bold,                      fontSize: 25                  ),                ),                SizedBox(                  width: 10,                ),                Icon(Icons.camera_alt, color: Colors.black12,)              ],            )        )      );    }  }  void onLoad() {      showDialog(        context: context,        barrierDismissible: false,        builder: (BuildContext context) {          return Dialog(            child: Container(              margin: const EdgeInsets.symmetric(vertical: 10),              child: Column(                mainAxisSize: MainAxisSize.min,                children: const [                  CircularProgressIndicator(),                  SizedBox(                    height: 2,                  ),                  Text("Loading"),                ],              ),            )          );        },      );      Future.delayed(          const Duration(seconds: 1), () {            Navigator.pop(context); //pop dialog            setState(() {              attendance = true;              sendData();            });          }      );  }  void sendData() {    User? user = auth.currentUser;    var uid = user?.uid;    var name = user?.displayName;    String timeFormat = DateFormat("yyyy-MM-dd").format(DateTime.now()).toString();    AttendancesModel attendances = AttendancesModel(        id_attendance: '',        id_user: '',        id_event: '',        particpant_name: '',        event_name: '',        event_date: '',        status: '',        admission_time: '',        creation_date: '',        update_date: ''    );     attendances.id_user = uid!;     attendances.id_event = events.id_event;     attendances.particpant_name = name!;     attendances.event_name = events.event_name;     attendances.event_date = events.event_date;     attendances.status = "1";     attendances.admission_time = timeFormat;     attendances.creation_date = timeFormat;     attendances.update_date = timeFormat;    attendanceApiService.createAtt(attendances)        .then((value) =>            toast("Berhasil mengikuti acara.")    );  }  void checkAttendance() async {    if(attendances.status == "1"){      attendance = true;      toast("Acara sudah diikuti, scan untuk menghadiri.");    }  }  void generateQR() {    showDialog(        context: context,        builder: (BuildContext context) => AlertDialog(          title: const Text("QR Code Kehadiran, Silahkan Scan Oleh Peserta."),          content: Screenshot(            controller: screenshotController,            child: CustomPaint(              size: const Size.square(280),              painter: QrPainter(                data: events.event_name,                version: QrVersions.auto,                emptyColor: Colors.white,              ),            ),          ),          actions: [            TextButton(              child: const Text("OK"),              onPressed: (){                Navigator.pop(context);              },            ),            TextButton(                child: const Text("Share"),                onPressed: () {                  Navigator.pop(context);                  checkPermission();                }            )          ],        )    );  }  Future screenShoot() async {    await screenshotController        .capture()        .then((capturedImage) async {      imageFile = capturedImage!;    }).catchError((onError) {      if (kDebugMode) {        print(onError);      }    });  }  shareImg() async {        final tempDir = await getTemporaryDirectory();    String fileName = DateTime.now().microsecondsSinceEpoch.toString();    File file = await File('${tempDir.path}/$fileName.png').create();    file.writeAsBytesSync(imageFile);    await Share.shareFiles([file.path]).then((value) => toast("sharing"));  }  Future checkPermission() async{    var status = await Permission.storage.status;    if(status.isDenied){      Permission.storage.request();    }else{      await screenShoot().then((value){        shareImg();      });    }  }  void goEditPage() {    Navigator.of(context).push(        MaterialPageRoute(            builder: (context) => EditEvent(event: events))    );  }  Future<void> pullRefresh() async  {    setState(() {});  }}